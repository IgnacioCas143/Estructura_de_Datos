// Código para Carro Sigue Línea Negra usando 3 Sensores IR

// --- Pines de Motores ---
const int motorIzqA = 5;  // Motor Izquierdo A
const int motorIzqB = 6;  // Motor Izquierdo B
const int motorDerA = 10; // Motor Derecho A (Ajustado para evitar conflicto con D9)
const int motorDerB = 11; // Motor Derecho B (Ajustado para evitar conflicto con D10 - si se usa)

// --- Pines Sensores IR (Seguidor de Línea) ---
const int sensorIzquierdo = 7;  // Sensor IR Izquierdo (D7)
const int sensorCentral = 8;    // Sensor IR Central (D8)
const int sensorDerecho = 9;    // Sensor IR Derecho (D9)

// --- Constantes Configurables ---
const int VELOCIDAD_NORMAL = 200;  // Velocidad normal seguidor (0-255) - Aumentada
const int VELOCIDAD_GIRO = 160;    // Velocidad giro seguidor (0-255) - Aumentada
const bool LINEA_NEGRA = true;     // true para línea negra, false para línea blanca

// --- Constantes de Inversión de Motores ---
const bool INVERTIR_MOTOR_IZQ = false; // Cambiar a true si el motor izquierdo gira al revés
const bool INVERTIR_MOTOR_DER = false; // Cambiar a true si el motor derecho gira al revés

// --- Variables Globales ---
int valorIzquierdoIR;
int valorCentralIR;
int valorDerechoIR;

void setup() {
  // Iniciar comunicación serial
  Serial.begin(9600);
  Serial.println("Iniciando Carro Sigue Línea...");

  // Configurar pines de motores como SALIDA
  pinMode(motorIzqA, OUTPUT);
  pinMode(motorIzqB, OUTPUT);
  pinMode(motorDerA, OUTPUT);
  pinMode(motorDerB, OUTPUT);

  // Configurar pines sensores IR como ENTRADA
  pinMode(sensorIzquierdo, INPUT);
  pinMode(sensorCentral, INPUT);
  pinMode(sensorDerecho, INPUT);

  // Detener motores al inicio
  detener();
  Serial.println("Motores detenidos.");
  delay(1000); // Pausa inicial

  Serial.println("Sistema listo.");
}

void loop() {
  // 1. Leer sensores IR
  leerSensoresIR();
  mostrarValoresSensoresIR();

  // 2. Lógica para seguir la línea
  if (LINEA_NEGRA) {
    seguirLineaNegra();
  } else {
    // Lógica para seguir línea blanca (sensor devuelve HIGH cuando detecta blanco)
    // seguirLineaBlanca(); // Implementar si es necesario
    Serial.println("Modo línea blanca no implementado.");
    detener();
  }

  delay(20); // Reducir delay para respuesta más rápida
}

// --- Funciones de Control de Motores (con inversión y analogWrite) ---

// Función genérica para controlar un par de pines de motor con inversión y velocidad
void controlMotor(int pinA, int pinB, int dirA, int dirB, int velocidad, bool invertir) {
  int nivelA = (dirA == HIGH) ? velocidad : LOW;
  int nivelB = (dirB == HIGH) ? velocidad : LOW;

  if (invertir) {
    // Invierte los pines si es necesario
    analogWrite(pinA, nivelB);
    analogWrite(pinB, nivelA);
  } else {
    analogWrite(pinA, nivelA);
    analogWrite(pinB, nivelB);
  }
}

void avanzar(int velocidad) {
  controlMotor(motorIzqA, motorIzqB, HIGH, LOW, velocidad, INVERTIR_MOTOR_IZQ);
  controlMotor(motorDerA, motorDerB, HIGH, LOW, velocidad, INVERTIR_MOTOR_DER);
}

void retroceder(int velocidad) {
  controlMotor(motorIzqA, motorIzqB, LOW, HIGH, velocidad, INVERTIR_MOTOR_IZQ);
  controlMotor(motorDerA, motorDerB, LOW, HIGH, velocidad, INVERTIR_MOTOR_DER);
}

void girarDerecha(int velocidad) {
  controlMotor(motorIzqA, motorIzqB, HIGH, LOW, velocidad, INVERTIR_MOTOR_IZQ); // Izquierda adelante
  controlMotor(motorDerA, motorDerB, LOW, HIGH, velocidad, INVERTIR_MOTOR_DER); // Derecha atrás (o detener/baja velocidad)
  // Alternativa: Detener motor derecho para giro más suave
  // controlMotor(motorDerA, motorDerB, LOW, LOW, 0, INVERTIR_MOTOR_DER);
}

void girarIzquierda(int velocidad) {
  controlMotor(motorIzqA, motorIzqB, LOW, HIGH, velocidad, INVERTIR_MOTOR_IZQ); // Izquierda atrás (o detener/baja velocidad)
  controlMotor(motorDerA, motorDerB, HIGH, LOW, velocidad, INVERTIR_MOTOR_DER); // Derecha adelante
  // Alternativa: Detener motor izquierdo para giro más suave
  // controlMotor(motorIzqA, motorIzqB, LOW, LOW, 0, INVERTIR_MOTOR_IZQ);
}

void detener() {
  // Poner ambos pines en LOW detiene la mayoría de los drivers
  analogWrite(motorIzqA, 0);
  analogWrite(motorIzqB, 0);
  analogWrite(motorDerA, 0);
  analogWrite(motorDerB, 0);
}

// --- Funciones Sensores IR ---
void leerSensoresIR() {
  // Lectura simple, se puede mejorar con promedios si hay ruido
  valorIzquierdoIR = digitalRead(sensorIzquierdo);
  valorCentralIR = digitalRead(sensorCentral);
  valorDerechoIR = digitalRead(sensorDerecho);
}

void mostrarValoresSensoresIR() {
  Serial.print("Sensores IR (I,C,D): ");
  Serial.print(valorIzquierdoIR == LOW ? "N" : "B"); // N=Negro, B=Blanco
  Serial.print(", ");
  Serial.print(valorCentralIR == LOW ? "N" : "B");
  Serial.print(", ");
  Serial.println(valorDerechoIR == LOW ? "N" : "B");
}

// --- Lógica Seguidor de Línea ---
void seguirLineaNegra() {
  // Para línea negra: LOW = línea detectada, HIGH = fondo claro

  // Caso 1: Solo el central ve la línea -> Avanzar recto
  if (valorIzquierdoIR == HIGH && valorCentralIR == LOW && valorDerechoIR == HIGH) {
    Serial.println("Línea: Avanzar");
    avanzar(VELOCIDAD_NORMAL);
  }
  // Caso 2: Izquierdo ve la línea (o izquierdo y central) -> Corregir a la Izquierda
  else if (valorIzquierdoIR == LOW && valorDerechoIR == HIGH) {
     Serial.println("Línea: Corregir Izquierda");
     // Giro más suave: reducir velocidad motor izquierdo o aumentar derecho
     controlMotor(motorIzqA, motorIzqB, HIGH, LOW, VELOCIDAD_GIRO / 2, INVERTIR_MOTOR_IZQ); // Izq más lento
     controlMotor(motorDerA, motorDerB, HIGH, LOW, VELOCIDAD_GIRO, INVERTIR_MOTOR_DER);     // Der normal/rápido
     // O usar giro sobre eje: girarIzquierda(VELOCIDAD_GIRO);
  }
  // Caso 3: Derecho ve la línea (o derecho y central) -> Corregir a la Derecha
  else if (valorIzquierdoIR == HIGH && valorDerechoIR == LOW) {
     Serial.println("Línea: Corregir Derecha");
     // Giro más suave: reducir velocidad motor derecho o aumentar izquierdo
     controlMotor(motorIzqA, motorIzqB, HIGH, LOW, VELOCIDAD_GIRO, INVERTIR_MOTOR_IZQ);     // Izq normal/rápido
     controlMotor(motorDerA, motorDerB, HIGH, LOW, VELOCIDAD_GIRO / 2, INVERTIR_MOTOR_DER); // Der más lento
     // O usar giro sobre eje: girarDerecha(VELOCIDAD_GIRO);
  }
  // Caso 4: Ninguno ve la línea -> Línea perdida, detener o buscar
  else if (valorIzquierdoIR == HIGH && valorCentralIR == HIGH && valorDerechoIR == HIGH) {
     Serial.println("Línea: Perdida - Detenido");
     detener(); // Podrías implementar una rutina de búsqueda aquí (girar hasta encontrar)
  }
  // Caso 5: Todos ven la línea (cruce?) -> Avanzar recto o acción específica
  else if (valorIzquierdoIR == LOW && valorCentralIR == LOW && valorDerechoIR == LOW) {
     Serial.println("Línea: Cruce? - Avanzando");
     avanzar(VELOCIDAD_NORMAL); // O detenerse, girar, etc.
  }
  // Otros casos (ej. solo laterales ven negro) - Podrían indicar error o fin de línea
  else {
      // Podría ser útil mantener el último estado o detenerse
      Serial.println("Línea: Estado inesperado - Detenido");
      detener();
  }
}
