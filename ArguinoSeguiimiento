// Código para carro seguidor de línea negra
// Utiliza sensores IR para detectar la línea negra en el piso

// Pines de motor
const int motorIzqA = 5;
const int motorIzqB = 6;
const int motorDerA = 9;
const int motorDerB = 10;

// Pines de sensores IR (ajustar según tu configuración)
const int sensorIzquierdo = 2;  // Sensor izquierdo
const int sensorCentral = 3;    // Sensor central (opcional)
const int sensorDerecho = 4;    // Sensor derecho

// Variables para almacenar el estado de los sensores
int valorIzquierdo;
int valorCentral;
int valorDerecho;

// Constantes configurables
const int VELOCIDAD_NORMAL = 150;  // Velocidad normal (0-255)
const int VELOCIDAD_GIRO = 120;    // Velocidad durante giros (0-255)
const bool LINEA_NEGRA = true;     // true para línea negra, false para línea blanca

// Configuración de tiempo
const int TIEMPO_MUESTREO = 50;    // Tiempo entre lecturas de sensores (ms)

void setup() {
  // Configuración de pines de motor como salidas
  pinMode(motorIzqA, OUTPUT);
  pinMode(motorIzqB, OUTPUT);
  pinMode(motorDerA, OUTPUT);
  pinMode(motorDerB, OUTPUT);
  
  // Configuración de pines de sensores como entradas
  pinMode(sensorIzquierdo, INPUT);
  pinMode(sensorCentral, INPUT);
  pinMode(sensorDerecho, INPUT);
  
  // Iniciar comunicación serial para depuración
  Serial.begin(9600);
  
  // Pequeña pausa antes de comenzar
  delay(1000);
  Serial.println("Carro seguidor de línea iniciado");
}

void loop() {
  // Leer sensores
  leerSensores();
  
  // Mostrar valores de sensores en el monitor serial
  mostrarValoresSensores();
  
  // Lógica para seguir la línea
  if (LINEA_NEGRA) {
    // Lógica para seguir línea negra (sensor devuelve LOW cuando detecta negro)
    seguirLineaNegra();
  } else {
    // Lógica para seguir línea blanca (sensor devuelve HIGH cuando detecta blanco)
    seguirLineaBlanca();
  }
  
  // Pequeña pausa para estabilizar lecturas
  delay(TIEMPO_MUESTREO);
}

// Función para leer los sensores
void leerSensores() {
  valorIzquierdo = digitalRead(sensorIzquierdo);
  valorCentral = digitalRead(sensorCentral);
  valorDerecho = digitalRead(sensorDerecho);
}

// Función para mostrar valores de sensores
void mostrarValoresSensores() {
  Serial.print("Sensores (I,C,D): ");
  Serial.print(valorIzquierdo);
  Serial.print(", ");
  Serial.print(valorCentral);
  Serial.print(", ");
  Serial.println(valorDerecho);
}

// Función para seguir línea negra
void seguirLineaNegra() {
  // Para línea negra: LOW = línea detectada, HIGH = fondo claro
  
  // Si ambos sensores laterales están fuera de la línea
  if (valorIzquierdo == HIGH && valorDerecho == HIGH) {
    // Si el sensor central detecta la línea, avanzar
    if (valorCentral == LOW) {
      avanzar(VELOCIDAD_NORMAL);
    } else {
      // Si ningún sensor detecta la línea, mantener último movimiento o buscar
      avanzar(VELOCIDAD_NORMAL / 2);  // Avanzar lento para buscar la línea
    }
  }
  // Si el sensor izquierdo detecta la línea pero el derecho no
  else if (valorIzquierdo == LOW && valorDerecho == HIGH) {
    girarIzquierda(VELOCIDAD_GIRO);
  }
  // Si el sensor derecho detecta la línea pero el izquierdo no
  else if (valorIzquierdo == HIGH && valorDerecho == LOW) {
    girarDerecha(VELOCIDAD_GIRO);
  }
  // Si ambos sensores detectan la línea (posible cruce o línea ancha)
  else if (valorIzquierdo == LOW && valorDerecho == LOW) {
    avanzar(VELOCIDAD_NORMAL);
  }
}

// Función para seguir línea blanca
void seguirLineaBlanca() {
  // Para línea blanca: HIGH = línea detectada, LOW = fondo oscuro
  
  // Si ambos sensores laterales están fuera de la línea
  if (valorIzquierdo == LOW && valorDerecho == LOW) {
    // Si el sensor central detecta la línea, avanzar
    if (valorCentral == HIGH) {
      avanzar(VELOCIDAD_NORMAL);
    } else {
      // Si ningún sensor detecta la línea, mantener último movimiento o buscar
      avanzar(VELOCIDAD_NORMAL / 2);  // Avanzar lento para buscar la línea
    }
  }
  // Si el sensor izquierdo detecta la línea pero el derecho no
  else if (valorIzquierdo == HIGH && valorDerecho == LOW) {
    girarIzquierda(VELOCIDAD_GIRO);
  }
  // Si el sensor derecho detecta la línea pero el izquierdo no
  else if (valorIzquierdo == LOW && valorDerecho == HIGH) {
    girarDerecha(VELOCIDAD_GIRO);
  }
  // Si ambos sensores detectan la línea (posible cruce o línea ancha)
  else if (valorIzquierdo == HIGH && valorDerecho == HIGH) {
    avanzar(VELOCIDAD_NORMAL);
  }
}

// Función para avanzar con control de velocidad
void avanzar(int velocidad) {
  analogWrite(motorIzqA, velocidad);
  digitalWrite(motorIzqB, LOW);
  analogWrite(motorDerA, velocidad);
  digitalWrite(motorDerB, LOW);
  Serial.println("Avanzando");
}

// Función para retroceder con control de velocidad
void retroceder(int velocidad) {
  digitalWrite(motorIzqA, LOW);
  analogWrite(motorIzqB, velocidad);
  digitalWrite(motorDerA, LOW);
  analogWrite(motorDerB, velocidad);
  Serial.println("Retrocediendo");
}

// Función para girar a la derecha con control de velocidad
void girarDerecha(int velocidad) {
  analogWrite(motorIzqA, velocidad);
  digitalWrite(motorIzqB, LOW);
  digitalWrite(motorDerA, LOW);
  analogWrite(motorDerB, velocidad);
  Serial.println("Girando a la derecha");
}

// Función para girar a la izquierda con control de velocidad
void girarIzquierda(int velocidad) {
  digitalWrite(motorIzqA, LOW);
  analogWrite(motorIzqB, velocidad);
  analogWrite(motorDerA, velocidad);
  digitalWrite(motorDerB, LOW);
  Serial.println("Girando a la izquierda");
}

// Función para detener el carro
void detener() {
  digitalWrite(motorIzqA, LOW);
  digitalWrite(motorIzqB, LOW);
  digitalWrite(motorDerA, LOW);
  digitalWrite(motorDerB, LOW);
  Serial.println("Detenido");
}
